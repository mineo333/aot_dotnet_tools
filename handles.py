from binaryninja import *
from .utils import *
from .dotnet_enums import *
from .flags import *

#this contains the various handle types in


#https://github.com/dotnet/runtime/blob/87fea60432fb34a2537a3a593c80042d8230b986/src/mono/System.Private.CoreLib/src/System/RuntimeTypeHandle.cs#L41

#the RuntimeTypeHandle is a special case

class RuntimeTypeHandle:
    def __init__(self, value):  
        self.val = value #the value is the vtable for that object
        
    # may need to get updated
    # see: https://github.com/dotnet/runtime/blob/f11dfc95e67ca5ccb52426feda922fe9bcd7adf4/src/libraries/System.Private.CoreLib/src/System/IntPtr.cs#L90
    
    def GetHashCode(self):
        return self.__hash__()

    def __str__(self):
        return hex(self.val)
    
    def __eq__(self, other):
        if isinstance(other, RuntimeTypeHandle):
            return self.val == other.val
        return False
    
    def __hash__(self):
        return read32(self.val + 0x14)
    


'''
Below this are anything related to the autogenerated NativeFormat

In the NativeFormat, there are many types that can exist. These types can all be found in NativeFormatReaderGen:
https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs

In the constructors for all these types, they call a mysterious Read() function. This Read() is not actually hand written, but rather, autogenerated. The autogen code can be found here: https://github.com/dotnet/runtime/tree/6fa9cfcdd9179a33a10c096c06150c4a11ccc93e/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator

AUTOGEN PROCESS:

The autogen process is fairly simple. Each type is looked over and is assigned a schema here: https://github.com/dotnet/runtime/blob/6fa9cfcdd9179a33a10c096c06150c4a11ccc93e/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/SchemaDef.cs. The naming in NativeFormatReaderGen is fairly convient. All things that end in Collection are collections, all things that end in Handle are handle, etc. 

Using the Schema, we output the source code for every read here: https://github.com/dotnet/runtime/blob/e133fe4f5311c0397f8cc153bada693c48eb7a9f/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/MdBinaryReaderGen.cs#L19

Looking in the ReaderGen, there are a few "classes" of reads that exist. Firstly, there exists a single read for all Handles, a single read for all Collections, etc. We seek to emulate that in the following code. We have a NativeFormatHandle which is a top-level class for Handles and implements the read for all handle classes. Any handles extend NativeFormatHandle as a subclass. We also have NativeFormatCollection which all collections extend.

On top of that most Handles and Collections have shared handling of data as well as, for the most part, the same members. For example, all collections have a reader and offset while all handles have a value. In addition, all types of a certain "class" have the same constructor. 
'''


class NativeFormatHandle:
    def __init__(self, value):
        self._hType = HandleType(value >> 24)
        self._value = (value & 0x00FFFFFF) | (HandleType.Method << 24)

    @property
    def value(self):
        return self._value
    
    def AsInt(self):
        return self._value

    @property
    def hType(self):
        return self._hType

    @property
    def Offset(self):
        return self._value & 0xffffff
    
    #This method should NEVER be called directly. Instead, it should be called by a subclass
    #Pulled from https://github.com/dotnet/runtime/blob/e133fe4f5311c0397f8cc153bada693c48eb7a9f/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/MdBinaryReaderGen.cs#L101
    def Read(reader, offset, subclass):
        (offset, value) = reader.DecodeUnsigned(offset)
        handle = subclass(value)
        return (offset, handle)


class NativeFormatCollection:
    def __init__(self, reader, offset):
        self.reader = reader
        self.offset = offset

    # pulled from: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/MdBinaryReaderGen.cs#L62
    def Read(reader, offset, subclass):
        values = subclass(reader, offset) #this subclass shit is a bit scuffed but this is basically how the code does it
        (offset, count) = reader.DecodeUnsigned(offset)
        for _ in range(count):
            offset = reader.SkipInteger(offset)
        return (offset, values)

#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L6193
class ScopeDefinitionHandleCollection(NativeFormatCollection):
    def __init__(self,reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        values = ScopeDefinitionHandleCollection(reader, offset)
        offset = NativeFormatCollection.Read(reader, offset, __class__)
        return (offset, values)

#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5572
class ParameterHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
        
#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5641
class GenericParameterHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)

#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5503
class CustomAttributeHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
        
    
# pulled from: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3175
class Method:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        offset = u32(handle.Offset)
        streamReader = reader.streamReader
        (offset, self.flags) = MethodAttributes.Read(streamReader, offset)
        (offset, self.implFlags) = MethodImplAttributes.Read(streamReader, offset)
        (offset, self.name) = ConstantStringValueHandle.Read(streamReader, offset) 
        print('name',hex(streamReader.base + self.name.Offset))
        (offset, self.signature) = MethodSignatureHandle.Read(streamReader, offset) 
        (offset, self.parameters) = ParameterHandleCollection.Read(streamReader, offset)
        (offset, self.genericParameters) = GenericParameterHandleCollection.Read(streamReader, offset)
        (offset, self.customAttributes) = CustomAttributeHandleCollection.Read(streamReader, offset)

# pulled from: https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3221
class MethodHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.Method or self._hType == HandleType.Null

    def GetMethod(self, reader):
        return Method(reader, self)
    
    def Read(reader, offset):
        (offset, value) = NativeFormatHandle.Read(reader, offset, __class__)
    
# pulled from: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L2029
class ConstantStringValueHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.ConstantStringValue or self._hType == HandleType.Null

    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
# pulled from: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3480
class MethodSignatureHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.MethodSignature or self._hType == HandleType.Null
    
    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    






'''
----------------------- Below this are QHandles -----------------------
'''

# pulled from: https://github.com/dotnet/runtime/blob/6ac8d055a200ccca0d6fa8604c18578234dffa94/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Reflection/Runtime/General/QHandles.NativeFormat.cs#L39
class QTypeDefinition:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle.AsInt()
        
    @property
    def NativeFormatReader(self):
        return self.reader
    

#https://github.com/dotnet/runtime/blob/6c83e0d2f0fbc40a78f7b570127f686767ea5d9f/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Reflection/Runtime/General/QHandles.NativeFormat.cs#L17
class QMethodDefinition:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
    
    @property
    def NativeFormatReader(self):
        return self.reader
    
    @property
    def NativeFormatHandle(self):
        MethodHandle(self.handle)

   