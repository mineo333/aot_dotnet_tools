from binaryninja import *
from ..utils import *
from ..dotnet_enums import *
from .autogen_nativeformat_enums import *
from .autogen_nativeformat_primitives import *

#https://github.com/dotnet/runtime/blob/ecd5ee7277b1eb33bed4cc91ce7abee609bbbd71/src/coreclr/nativeaot/System.Private.CoreLib/src/System/RuntimeTypeHandle.cs#L17

#MethodTable: https://github.com/dotnet/runtime/blob/10ee2b11e94acf23fe17fe36d2dbc2db588f06ec/src/coreclr/nativeaot/Runtime/inc/MethodTable.h#L82

#the RuntimeTypeHandle is basically a shitty wrapper around MethodTable

#TODO: This needs to be moved to its own class as this si not part of the 
class RuntimeTypeHandle:
    def __init__(self, value):  
        self.val = value #the value is the vtable for that object
    
    def GetHashCode(self):
        return self.__hash__()

    def __str__(self):
        return hex(self.val)
    
    def __eq__(self, other):
        if isinstance(other, RuntimeTypeHandle):
            return self.val == other.val
        return False
    
    def __hash__(self):
        return read32(self.val + 0x14)
    


'''
Below this are anything related to the autogenerated NativeFormat

In the NativeFormat, there are many types that can exist. These types can all be found in NativeFormatReaderGen:
https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs

In the constructors for all these types, they call a mysterious Read() function. This Read() is not actually hand written, but rather, autogenerated. The autogen code can be found here: https://github.com/dotnet/runtime/tree/6fa9cfcdd9179a33a10c096c06150c4a11ccc93e/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator

AUTOGEN PROCESS:

The autogen process is fairly simple. Each type is looked over and is assigned a schema here: https://github.com/dotnet/runtime/blob/6fa9cfcdd9179a33a10c096c06150c4a11ccc93e/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/SchemaDef.cs. The naming in NativeFormatReaderGen is fairly convient. All things that end in Collection are collections, all things that end in Handle are handle, etc. 

Using the Schema, we output the source code for every read here: https://github.com/dotnet/runtime/blob/e133fe4f5311c0397f8cc153bada693c48eb7a9f/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/MdBinaryReaderGen.cs#L19

Looking in the ReaderGen, there are a few "classes" of reads that exist. Firstly, there exists a single read for all Handles, a single read for all Collections, etc. We seek to emulate that in the following code. We have a NativeFormatHandle which is a top-level class for Handles and implements the read for all handle classes. Any handles extend NativeFormatHandle as a subclass. We also have NativeFormatCollection which all collections extend.

On top of that most Handles and Collections have shared handling of data as well as, for the most part, the same members. For example, all handles will always have the top 8 bits be the hType and the bottom 24 bits be the offset. In addition, all types of a certain "class" have the same constructor. 

HOW WE TRANSLATE AUTOGEN:

The way autogen works is that, for every type, it generates an extension Read method that outputs that type. The way the Read works depends on the underlying "flavor" of type (i.e., Handle, Collection, Enum). However, the read is the same for any particular flavor. The only difference is the output type.

To reflect that, we create a top-level class for every flavor - NativeFormatHandle for Handle and NativeFormatCollection for Collection. This is the read implementation for Read. The output type is passed as an argument into this read.

Every type extends its flavor's class (i.e., TypeDefinitionHandle extends NativeFormatHandle) and its read implementation simply calls back to its parent's read.

Because we don't have the ability to implement extension methods and we are not autogen-ing, the way you call read is as follows: [output_type].Read(reader, offset)

In other words, suppose we have TypeDefinitionHandle. Then its read will look like Read(this NativeFormatReader reader, uint offset, out TypeDefinitionHandle handle). To do this read in python, you would call TypeDefinitionHandle.Read(reader, offset) as TypeDefinitionHandle is the output type. 

'''


class NativeFormatHandle:
    def __init__(self, value):
        if isinstance(value, NativeFormatHandle): #if it is an instance of NativeFormatHandle then it is a cross-handle cast, so basically just copy it over
            self._hType = value._hType
            self._value = value._value
        else:
            self._hType = HandleType(s32(value) >> 24)
            self._value = (value & 0x0FFFFFF)

    @property
    def value(self):
        return self._value
    
    def AsInt(self):
        return self._value

    @property
    def hType(self):
        return self._hType

    @property
    def Offset(self):
        return s32(self._value & 0x0FFFFFF)
    
    #This method should NEVER be called directly. Instead, it should be called by a subclass
    #Pulled from https://github.com/dotnet/runtime/blob/e133fe4f5311c0397f8cc153bada693c48eb7a9f/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/MdBinaryReaderGen.cs#L101
    #returns the new offset as well as the newly created handle. All handles have the same read. The only difference is the returned object - the underlying value is read the same way
    def Read(reader, offset, handle_type):
        (offset, value) = reader.DecodeUnsigned(offset)
        handle = handle_type(s32(value))
        return (offset, handle)

#This class is intended for Handle collections. Evidence for this can be seen here: 
class NativeFormatCollection:
    def __init__(self, reader, offset):
        self.reader = reader
        self.offset = offset

    # pulled from: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/MdBinaryReaderGen.cs#L62
    #returns the new offset and the newly created collection
    #All collections have the same Read. The only difference is the actual type of the collection that is returned
    def Read(reader, offset, subclass):
        values = subclass(reader, offset) 
        (offset, count) = reader.DecodeUnsigned(offset)
        for _ in range(count):
            offset = reader.SkipInteger(offset)
        return (offset, values)
    
    
    #The rest of the NativeFormatCollection stuff was pulled from: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/ReaderGen.cs#L184
    @property
    def count(self):
        (_, count) = self.reader.DecodeUnsigned(self.offset)
        return s32(count)
    
    #All enumerators are the same except the type that is read upon going next
    class Enumerator:
        def __init__(self, reader, offset, elem_type):
            self.reader = reader
            self.offset = offset
            (self.offset, self.remaining) = reader.DecodeUnsigned(self.offset)
            self.elem_type = elem_type #elem_type is a custom type that denotes the element that this is a collection of
        
        def __iter__(self):
            return self
        
        def __next__(self):
            if self.remaining == 0:
                raise StopIteration
            self.remaining -= 1
            (self.offset, current) = self.elem_type.Read(self.reader, self.offset)
            return current
    


'''
Generic Handle

This is used in cases where handles are overloaded such as https://github.com/dotnet/runtime/blob/d8208737f8b1ede2c6673a89769dc29fb7a7f6af/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3814
'''

class Handle(NativeFormatHandle):
    def __init__(self, value, hType=None):
        if hType != None: #This is used for manually constructing a Handle given a value and a handle type
            super().__init__(hType << 24 | value)
        else:
            super().__init__(value)

    #https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/MdBinaryReader.cs#L77
    def Read(reader, offset):
        (offset, value) = reader.DecodeUnsigned(offset)
        return (offset, Handle(s32(value >> 8), hType=HandleType(s8(value))))


class HandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, Handle)

'''
------ScopeDefinition------
'''

#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L6193
class ScopeDefinitionHandleCollection(NativeFormatCollection):
    def __init__(self,reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, ScopeDefinitionHandle)
    
#https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L4575
class ScopeDefinition:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        offset = handle.Offset
        streamReader = reader.streamReader
        (offset, self.flags) = AssemblyFlags.Read(streamReader, offset)
        (offset, self.name) = ConstantStringValueHandle.Read(streamReader, offset)
        (offset, self.hashAlgorithm) = AssemblyHashAlgorithm.Read(streamReader, offset)
        (offset, self.majorVersion) = UInt16.Read(streamReader, offset)
        (offset, self.minorVersion) = UInt16.Read(streamReader, offset)
        (offset, self.buildNumber) = UInt16.Read(streamReader, offset)
        (offset, self.revisionNumber) = UInt16.Read(streamReader, offset)
        (offset, self.publicKey) =  ByteCollection.Read(streamReader, offset)
        (offset, self.culture) = ConstantStringValueHandle.Read(streamReader, offset)
        (offset, self.rootNamespaceDefinition) = NamespaceDefinitionHandle.Read(streamReader, offset)
        (offset, self.entryPoint) = QualifiedMethodHandle.Read(streamReader, offset)
        (offset, self.globalModuleType) = TypeDefinitionHandle.Read(streamReader, offset)
        (offset, self.customAttributes) = CustomAttributeHandleCollection.Read(streamReader, offset)
        (offset, self.moduleName) = ConstantStringValueHandle.Read(streamReader, offset)
        (offset, self.mvid) = ByteCollection.Read(streamReader, offset)
        (offset, self.moduleCustomAttributes) = CustomAttributeHandleCollection.Read(streamReader, offset)
        
#https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L4658
class ScopeDefinitionHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.ScopeDefinition or self._hType == HandleType.Null

    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
    def GetScopeDefinition(self, reader):
        return ScopeDefinition(reader, self)
    
'''
NamespaceDefinition
'''

#https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3833
class NamespaceDefinitionHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.NamespaceDefinition or self._hType == HandleType.Null

    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
    def GetNamespaceDefinition(self, reader):
        return NamespaceDefinition(reader, self)

#https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3793
class NamespaceDefinition:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        offset = handle.Offset
        streamReader = reader.streamReader
        (offset, self.parentScopeOrNamespace) = Handle.Read(streamReader, offset)
        (offset, self.name) = ConstantStringValueHandle.Read(streamReader, offset)
        (offset, self.typeDefinitions) = TypeDefinitionHandleCollection.Read(streamReader, offset)
        (offset, self.typeForwarders) = TypeForwarderHandleCollection.Read(streamReader, offset)
        (offset, self.namespaceDefinitions) = NamespaceDefinitionHandleCollection.Read(streamReader, offset)
        
class NamespaceDefinitionHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, NamespaceDefinitionHandle)


'''
TypeForwarder
'''

class TypeForwarderHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
    
    #def GetEnumerator(self):
    #    return NativeFormatCollection.Enumerator(self.reader, self.offset, TypeForwarderHandle)
    

    
'''
QualifiedMethod
'''

class QualifiedMethodHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.QualifiedMethod or self._hType == HandleType.Null

    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
'''
TypeDefinition
'''

#https://github.com/dotnet/runtime/blob/main/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L4900
class TypeDefinitionHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.TypeDefinition or self._hType == HandleType.Null

    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
    def GetTypeDefinition(self, reader):
        return TypeDefinition(reader, self)
    
    
class TypeDefinitionHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, TypeDefinitionHandle)
    

#https://github.com/dotnet/runtime/blob/d8208737f8b1ede2c6673a89769dc29fb7a7f6af/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L4819
class TypeDefinition:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        offset = handle.Offset
        streamReader = reader.streamReader
        (offset, self.flags) = streamReader.DecodeUnsigned(offset)#TypeAttributes.Read(streamReader, offset) - TODO: TypeAttributes is broken
        (offset, self.baseType) = Handle.Read(streamReader, offset)
        (offset, self.namespaceDefinition) = NamespaceDefinitionHandle.Read(streamReader, offset)
        (offset, self.name) = ConstantStringValueHandle.Read(streamReader, offset)
        (offset, self.size) = UInt32.Read(streamReader, offset)
        (offset, self.packingSize) = UInt16.Read(streamReader, offset)
        (offset, self.enclosingType) = TypeDefinitionHandle.Read(streamReader, offset)
        (offset, self.nestedTypes) = TypeDefinitionHandleCollection.Read(streamReader, offset)
        (offset, self.methods) = MethodHandleCollection.Read(streamReader, offset)
        (offset, self.fields) = FieldHandleCollection.Read(streamReader, offset)
        #(offset, self.properties) = PropertyHandleCollection.Read(streamReader, offset)
        #(offset, self.events) = EventHandleCollection.Read(streamReader, offset)
        
    def get_name(self, reader):
        return self.name.GetConstantStringValue(reader)
        

'''
Event
'''

#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5572
class EventHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
        
'''
Field
'''

#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5572
class FieldHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)

'''
Parameter
'''

#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5572
class ParameterHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)

'''
Generic Parameter
'''
        
#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5641
class GenericParameterHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)


'''
CustomAttribute
'''

#https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5503
class CustomAttributeHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
        


'''
------Method------
'''    

# pulled from: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3175
class Method:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        offset = u32(handle.Offset)
        streamReader = reader.streamReader
        (offset, self.flags) = MethodAttributes.Read(streamReader, offset)
        (offset, self.implFlags) = MethodImplAttributes.Read(streamReader, offset)
        (offset, self.name) = ConstantStringValueHandle.Read(streamReader, offset) 
        (offset, self.signature) = MethodSignatureHandle.Read(streamReader, offset) 
        (offset, self.parameters) = ParameterHandleCollection.Read(streamReader, offset)
        (offset, self.genericParameters) = GenericParameterHandleCollection.Read(streamReader, offset)
        (offset, self.customAttributes) = CustomAttributeHandleCollection.Read(streamReader, offset)
        

# pulled from: https://github.com/dotnet/runtime/blob/a72cfb0ee2669abab031c5095a670678fd0b7861/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3221
class MethodHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.Method or self._hType == HandleType.Null

    def GetMethod(self, reader):
        return Method(reader, self)
    
    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
        
class MethodHandleCollection(NativeFormatCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
    
    def Read(reader, offset):
        return NativeFormatCollection.Read(reader, offset, __class__)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, MethodHandle)


'''
------ConstantString------
'''
#this was retrieved from the disassembly
class ConstantStringValue:
    def __init__(self, reader, handle):
        self.reader = reader
        streamReader = reader.streamReader
        (_, self.value) = String.Read(streamReader, handle.Offset)
    def __str__(self):
        return self.value
    
# pulled from: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L2029
class ConstantStringValueHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.ConstantStringValue or self._hType == HandleType.Null

    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
    def GetConstantStringValue(self, metadataReader):
        return ConstantStringValue(metadataReader, self)
            
    

'''
------TypeReference------
'''
#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5153
class TypeReferenceHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.TypeReference or self._hType == HandleType.Null

    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
    def GetTypeReference(self, reader):
        return TypeReference(reader, self)
    
#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5130
class TypeReference:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        streamReader = reader.streamReader
        offset = handle.Offset
        (offset, self.parentNameSpaceOrType) = Handle.Read(streamReader, offset)
        (offset, self.typeName) = ConstantStringValueHandle.Read(streamReader, offset)
        
    def get_name(self, reader):
        return self.typeName.GetConstantStringValue(reader)
        

'''
TypeSpecification 

A type specification seems to specify
'''

class TypeSpecificationHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.TypeSpecification or self._hType == HandleType.Null

    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)

    def GetTypeSpecification(self, reader):
        return TypeSpecification(reader, self)


#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5208
class TypeSpecification:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        streamReader = reader.streamReader
        offset = handle.Offset 
        (offset, self.signature) = Handle.Read(streamReader, offset)
    
    #https://github.com/dotnet/runtime/blob/e52cfdbea428e65307c40586e3e308aeed385e86/src/coreclr/nativeaot/System.Private.StackTraceMetadata/src/Internal/StackTraceMetadata/MethodNameFormatter.cs#L208    
    def get_name(self, reader):
        # possible cases: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5224
        match self.signature.hType:
            case HandleType.TypeDefinition:
                type_definition = TypeDefinitionHandle(self.signature).GetTypeDefinition(reader)
                return type_definition.get_name(reader)
            case HandleType.TypeReference:
                type_reference = TypeReferenceHandle(self.signature).GetTypeReference(reader)
                return type_reference.get_name(reader)
            case HandleType.TypeInstantiationSignature:
                type_instantiation = TypeInstantiationSignatureHandle(self.signature).GetTypeInstantiationSignature(reader)
                return type_instantiation.get_name(reader)
            case HandleType.SZArraySignature:
                sz_array_sig = SZArraySignatureHandle(self.signature).GetSZArraySignature(reader)
                return sz_array_sig.get_name(reader)
            case HandleType.ArraySignature:
                array_sig = ArraySignatureHandle(self.signature).GetArraySignature(reader)
                return array_sig.get_name(reader)
            case HandleType.PointerSignature:
                pointer_sig = PointerSignatureHandle(self.signature).GetPointerSignature(reader)
                return pointer_sig.get_name(reader)
            case HandleType.ByReferenceSignature:
                by_ref_sig = ByReferenceSignatureHandle(self.signature).GetByReferenceSignature(reader)
                return by_ref_sig.get_name(reader)
            case _:
                raise Exception(f"Invalid handle type in {__class__} - {HandleType(self.signature.hType).name}")
            

    

'''
TypeInstantiationSignature
'''

class TypeInstantiationSignatureHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.TypeInstantiationSignature or self._hType == HandleType.Null

    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
    def GetTypeInstantiationSignature(self, reader):
        return TypeInstantiationSignature(reader, self)
    
    
#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5041
class TypeInstantiationSignature:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        streamReader = reader.streamReader
        offset = handle.Offset
        (offset, self.genericType) = Handle.Read(streamReader, offset)
        (offset, self.genericTypeArguments) = HandleCollection.Read(streamReader, offset)
    
    #https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L5058
    def get_name(self, reader):
        match self.genericType.hType:
            case HandleType.TypeDefinition:
                type_definition = TypeDefinitionHandle(self.genericType).GetTypeDefinition(reader)
                return type_definition.get_name(reader)
            case HandleType.TypeReference:
                type_reference = TypeReferenceHandle(self.genericType).GetTypeReference(reader)
                return type_reference.get_name(reader)
            case HandleType.TypeSpecification:
                type_spec = TypeSpecificationHandle(self.genericType).GetTypeSpecification(reader)
                return type_spec.get_name(reader)
            case _:
                raise Exception(f"Invalid handle type in {__class__}")
                
'''
ModifiedType
'''                
#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3613

class ModifiedTypeHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.ModifiedType or self._hType == HandleType.Null
    
    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
    def GetModifiedType(self, reader):
        return ModifiedType(reader, self)

class ModifiedType:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        streamReader = reader.streamReader
        offset = handle.Offset
        (offset, self.isOptional) = Boolean.Read(streamReader, offset)
        (offset, self.modifierType) = Handle.Read(streamReader, offset)
        (offset, self.type) = Handle.Read(streamReader, offset)
    
    #https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3638
    def get_name(self, reader):
        match self.type.hType:
            case HandleType.TypeDefinition:
                type_definition = TypeDefinitionHandle(self.type).GetTypeDefinition(reader)
                return type_definition.get_name(reader)
            case HandleType.TypeReference:
                type_reference = TypeReferenceHandle(self.type).GetTypeReference(reader)
                return type_reference.get_name(reader)
            case HandleType.TypeSpecification:
                type_spec = TypeSpecificationHandle(self.type).GetTypeSpecification(reader)
                return type_spec.get_name(reader)
            case HandleType.ModifiedType:
                mod_type = ModifiedTypeHandle(self.type).GetModifiedType(reader)
                return mod_type.get_name(reader)
            case _:
                raise Exception(f"Invalid handle type in {__class__}")

'''
SZArraySignature
'''  

#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L4524C18-L4524C40
class SZArraySignatureHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.SZArraySignature or self._hType == HandleType.Null
    
    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
    def GetSZArraySignature(self, reader):
        return SZArraySignature(reader, self)

#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L4501
class SZArraySignature:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        streamReader = reader.streamReader
        offset = handle.Offset
        (offset, self.elementType) = Handle.Read(streamReader, offset)

    # cases: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L4512
    def get_name(self, reader):
        match self.elementType.hType:
            case HandleType.TypeDefinition:
                type_definition = TypeDefinitionHandle(self.elementType).GetTypeDefinition(reader)
                return f"{type_definition.get_name(reader)}[]"
            case HandleType.TypeReference:
                type_reference = TypeReferenceHandle(self.elementType).GetTypeReference(reader)
                return f"{type_reference.get_name(reader)}[]"
            case HandleType.TypeSpecification:
                type_spec = TypeSpecificationHandle(self.elementType).GetTypeSpecification(reader)
                return f"{type_spec.get_name(reader)}[]"
            case HandleType.ModifiedType:
                mod_type = ModifiedTypeHandle(self.elementType).GetModifiedType(reader)
                return f"{mod_type.get_name(reader)}[]" 
            case _:
                raise Exception(f"Invalid handle type in {__class__}")
            


'''
ArraySignature
'''

class ArraySignatureHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.ArraySignature or self._hType == HandleType.Null
    
    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)
    
    def GetArraySignature(self, reader):
        return ArraySignature(reader, self)
    
#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L27
class ArraySignature:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        streamReader = reader.streamReader
        offset = handle.Offset
        (offset, self.elementType) = Handle.Read(streamReader, offset)
        (offset, self.rank) = Int32.Read(streamReader, offset)
        (offset, self.sizes) = Int32Collection.Read(streamReader, offset)
        (offset, self.lowerbounds) = Int32Collection.Read(streamReader, offset)
        
    def get_name(self, reader):
        match self.elementType.hType:
            case HandleType.TypeDefinition:
                type_definition = TypeDefinitionHandle(self.elementType).GetTypeDefinition(reader)
                return f"{type_definition.get_name(reader)}[]"
            case HandleType.TypeReference:
                type_reference = TypeReferenceHandle(self.elementType).GetTypeReference(reader)
                return f"{type_reference.get_name(reader)}[]"
            case HandleType.TypeSpecification:
                type_spec = TypeSpecificationHandle(self.elementType).GetTypeSpecification(reader)
                return f"{type_spec.get_name(reader)}[]"
            case HandleType.ModifiedType:
                mod_type = ModifiedTypeHandle(self.elementType).GetModifiedType(reader)
                return f"{mod_type.get_name(reader)}[]" 
            case _:
                raise Exception(f"Invalid handle type in {__class__}")
            
'''
PointerSignatureHandle
'''

class PointerSignatureHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.PointerSignature or self._hType == HandleType.Null
    
    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)

    def GetPointerSignature(self, reader):
        return PointerSignature(reader, self)

#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L4066
class PointerSignature:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        streamReader = reader.streamReader
        offset = handle.Offset
        
        (offset, self.type) = Handle.Read(streamReader, offset)
    
    def get_name(self, reader):
        match self.type.hType:
            case HandleType.TypeDefinition:
                type_definition = TypeDefinitionHandle(self.type).GetTypeDefinition(reader)
                return f"{type_definition.get_name(reader)}*"
            case HandleType.TypeReference:
                type_reference = TypeReferenceHandle(self.type).GetTypeReference(reader)
                return f"{type_reference.get_name(reader)}*"
            case HandleType.TypeSpecification:
                type_spec = TypeSpecificationHandle(self.type).GetTypeSpecification(reader)
                return f"{type_spec.get_name(reader)}*"
            case HandleType.ModifiedType:
                mod_type = ModifiedTypeHandle(self.type).GetModifiedType(reader)
                return f"{mod_type.get_name(reader)}*" 
            case _:
                raise Exception(f"Invalid handle type in {__class__}")


'''
ByReferenceSignature
'''

class ByReferenceSignatureHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.ByReferenceSignature or self._hType == HandleType.Null
    
    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)

    def GetByReferenceSignature(self, reader):
        return ByReferenceSignature(reader, self)

#https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L4066
class ByReferenceSignature:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        streamReader = reader.streamReader
        
        offset = handle.Offset
        (offset, self.type) = Handle.Read(streamReader, offset)
    def get_name(self, reader):
        match self.type.hType:
            case HandleType.TypeDefinition:
                type_definition = TypeDefinitionHandle(self.type).GetTypeDefinition(reader)
                return type_definition.get_name(reader)
            case HandleType.TypeReference:
                type_reference = TypeReferenceHandle(self.type).GetTypeReference(reader)
                return type_reference.get_name(reader)
            case HandleType.TypeSpecification:
                type_spec = TypeSpecificationHandle(self.type).GetTypeSpecification(reader)
                return type_spec.get_name(reader)
            case HandleType.ModifiedType:
                mod_type = ModifiedTypeHandle(self.type).GetModifiedType(reader)
                return mod_type.get_name(reader)
            case _:
                raise Exception(f"Invalid handle type in {__class__}")


'''
------MethodSignature------
'''

class MethodSignature:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
        offset = u32(handle.Offset)
        

# pulled from: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/NativeFormatReaderGen.cs#L3480
class MethodSignatureHandle(NativeFormatHandle):
    def __init__(self, value):
        super().__init__(value)
        assert self._hType == 0 or self._hType == HandleType.MethodSignature or self._hType == HandleType.Null
    
    def Read(reader, offset):
        return NativeFormatHandle.Read(reader, offset, __class__)


'''
------Primitive Collections------

These are output here: https://github.com/dotnet/runtime/blob/e133fe4f5311c0397f8cc153bada693c48eb7a9f/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/ReaderGen.cs#L55
'''
    
#The difference between this and a normal NativeCollection is that a NativePrimitiveCollection
class NativePrimitiveCollection:
    def __init__(self, reader, offset):
        self.reader = reader
        self.offset = offset
    
    #This Read comes from here: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/MdBinaryReaderGen.cs#L78
    def Read(reader, offset, subclass, elem):
        values = subclass(reader, offset)
        (offset, count) = reader.DecodeUnsigned(offset)
        offset = offset + count * elem.SIZE
        return (offset, values)

    #The enumerator is exactly the same between NativeFormatCollection and NativePrimitiveCollection
    #This is evidenced by the fact that you use the same method to emit stuff for Handle collections and primitive collections: https://github.com/dotnet/runtime/blob/f72784faa641a52eebf25d8212cc719f41e02143/src/coreclr/tools/Common/Internal/Metadata/NativeFormat/Generator/ReaderGen.cs#L48
    
class CharCollection(NativePrimitiveCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativePrimitiveCollection.Read(reader, offset, __class__, Char)
    
    def GetEnumerator(self):
        
        return NativeFormatCollection.Enumerator(self.reader, self.offset, Char)
    
class Int16Collection(NativePrimitiveCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativePrimitiveCollection.Read(reader, offset, __class__, Int16)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, Int16)
    
class SByteCollection(NativePrimitiveCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativePrimitiveCollection.Read(reader, offset, __class__, SByte)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, SByte)


class UInt64Collection(NativePrimitiveCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativePrimitiveCollection.Read(reader, offset, __class__, UInt64)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, UInt64)
    
class Int32Collection(NativePrimitiveCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativePrimitiveCollection.Read(reader, offset, __class__, Int32)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, Int32)
    
class UInt32Collection(NativePrimitiveCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativePrimitiveCollection.Read(reader, offset, __class__, UInt32)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, UInt32)
    
class ByteCollection(NativePrimitiveCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativePrimitiveCollection.Read(reader, offset, __class__, Byte)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, Byte)

class UInt16Collection(NativePrimitiveCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativePrimitiveCollection.Read(reader, offset, __class__, UInt16)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, UInt16)
    
class Int16Collection(NativePrimitiveCollection):
    def __init__(self, reader, offset):
        super().__init__(reader, offset)
        
    def Read(reader, offset):
        return NativePrimitiveCollection.Read(reader, offset, __class__, Int16)
    
    def GetEnumerator(self):
        return NativeFormatCollection.Enumerator(self.reader, self.offset, Int16)



'''
----------------------- Below this are QHandles -----------------------
'''

# pulled from: https://github.com/dotnet/runtime/blob/6ac8d055a200ccca0d6fa8604c18578234dffa94/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Reflection/Runtime/General/QHandles.NativeFormat.cs#L39
class QTypeDefinition:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle.AsInt()
        
    @property
    def NativeFormatReader(self):
        return self.reader
    

#https://github.com/dotnet/runtime/blob/6c83e0d2f0fbc40a78f7b570127f686767ea5d9f/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Reflection/Runtime/General/QHandles.NativeFormat.cs#L17
class QMethodDefinition:
    def __init__(self, reader, handle):
        self.reader = reader
        self.handle = handle
    
    @property
    def NativeFormatReader(self):
        return self.reader
    
    @property
    def NativeFormatHandle(self):
        MethodHandle(self.handle)

   